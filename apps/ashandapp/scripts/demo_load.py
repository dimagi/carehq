from datetime import datetime, timedelta, date
import hashlib
from django.contrib.auth.models import User
from casetracker.models import Case, Status, EventActivity, CaseEvent, Priority, Category, CaseAction

from provider.models import Provider
from patient.models import Patient, IdentifierType, PatientIdentifier
from ashandapp.models import CareTeam,ProviderRole,ProviderLink

import random
import uuid
from django.core.management import call_command
from demopatients import patient_arr

MAX_DELTA=365
PROVIDERS_PER_PATIENT=5
MAX_REVISIONS=2
MAX_INITIAL_CASES = 10

def create_user(username='mockuser', password='demouser'):    
    user = User()    
    user.username = username
    # here, we mimic what the django auth system does
    # only we specify the salt to be 12345
    salt = '12345'
    hashed_pass = hashlib.sha1(salt+password).hexdigest()
    user.password = 'sha1$%s$%s' % (salt, hashed_pass)
    
    user.set_password(password)
    user.save()
    return user

def create_patient(firstname, middlename, lastname, sex):
    
    firstclean = firstname.replace("'","")
    lastclean = lastname.replace("'","")
    dob = date(random.randint(1955,2008), random.randint(1,12), random.randint(1,28))    
    
    pt = Patient()
    pt.first_name = firstname
    pt.middle_name = middlename
    pt.last_name = lastname
    pt.sex = sex
    pt.dob = dob
    pt.user = create_user(username=firstclean.lower() + "_" + lastclean.lower(), password='demo')
    pt.is_primary = True
    pt.save()    
    return pt


def set_random_identifiers(patient):
    for ident in IdentifierType.objects.all():
        if random.random() < 0.33:
            #set some arbitrary somewhat random threshold to skip
            continue
        new_id = PatientIdentifier()
        new_id.id_type = ident
        new_id.patient = patient
        new_id.id_value = uuid.uuid1().hex
        new_id.save()

def create_careteam(patient):
    print "\tCreate care team for patient %s" % patient.user
    team = CareTeam()
    team.patient = patient.user    
    team.save()
    total_providers = random.randint(0,PROVIDERS_PER_PATIENT)
    all_providers = Provider.objects.all().values_list('id', flat=True)
    prov_arr = [x for x in all_providers]
    random.shuffle(prov_arr)
    print "\tCreated Patient, assigning %d providers" % total_providers
    for num in range(0,total_providers):
        rand_prov_id = prov_arr[num]
        rand_prov = Provider.objects.get(id=rand_prov_id)               
        
        plink = ProviderLink()
        plink.care_team=team
        plink.provider = rand_prov.user
        
        #set some random role.        
        provider_role = ProviderRole()
        provider_role.role = ProviderRole.ROLE_CHOICES[random.randint(0, len(ProviderRole.ROLE_CHOICES)-1)][0]
        provider_role.role_description = "This provider does something"
        provider_role.role_notes = "autogenerated from demo_load"
        provider_role.save()
                        
        plink.role = provider_role        
        plink.save()


def create_case(user, all_users, case_no):    
    newcase = Case()
    newcase.description = "test case generated - %d" % case_no
    newcase.opened_by = user
    
    newcase.assigned_to = all_users[random.randint(0,len(all_users)-1)]
    newcase.category = Category.objects.all()[random.randint(0, Category.objects.all().count()-1)]
    newcase.status = Status.objects.all()[random.randint(0, Status.objects.all().count() -1)]
    newcase.priority = Priority.objects.all()[random.randint(0, Priority.objects.all().count() -1)]    
    newcase.next_action = CaseAction.objects.all()[random.randint(0, CaseAction.objects.all().count() -1)]
    
    td = timedelta(days=random.randint(0,MAX_DELTA))
    newcase.next_action_date = datetime.utcnow() + td
    
    newcase.save()
    return newcase

def modify_case(case, user, rev_no):    
    case.description = "modified by %s - rev %d" % (user.username, rev_no)
    case.last_edit_by = user
    
    case.next_action = CaseAction.objects.all()[random.randint(0, CaseAction.objects.all().count() -1)]
    td = timedelta(days=random.randint(0,MAX_DELTA))    
    case.next_action_date = case.next_action_date + td
    case.save()        

def run():
    
    #Demo loading script!
    
    #reset the database
    call_command('reset_db', interactive=False)
    call_command('syncdb', interactive=False)
    
    #load all the demo categories for cases
    call_command('loaddata', '0-caseaction.json')
    call_command('loaddata', '1-category.json')
    call_command('loaddata', '2-eventactivity.json')
    call_command('loaddata', '3-priority.json')
    call_command('loaddata', '4-status.json')
    call_command('loaddata', '5-gridcolumns.json')
    call_command('loaddata', 'build-example_filters.json')
    
    #load all providers
    call_command('loaddata', 'demo-providers.json')
    call_command('loaddata', 'demo-identifiers.json')

    #check to make sure all the providers have user objects, as the json doesn't set one
    for prov in Provider.objects.all():        
        firstclean = prov.first_name.replace("'","")
        lastclean = prov.last_name.replace("'","")
        uname = firstclean.lower() + "_" + lastclean.lower()
        
        try:
            user = User.objects.get(username=uname)
        except:
            user = create_user(username=uname, password='demo')            
        
        if prov.user == None:
            prov.user = user
            prov.save()
    print "created all providers and linked to user objects"
    
    
    #create patients    
    for ptarr in patient_arr:
        create_patient(ptarr[0],ptarr[1],ptarr[2],ptarr[3])
    
    print "Created test patients.  Total %d" % Patient.objects.all().count()
        
    print "Creating care teams..."
    #create careteam around all patients and link providers to them
    for patient in Patient.objects.all():
        create_careteam(patient)
    
    
    #before making the case, we need to get all the user objects of the people in the careteam.
    #first the providers:
    
    
    revision_no = 0
    for team in CareTeam.objects.all():        
        provs = team.providers.all()
        users = [team.patient]
        #get the user objects from the providers on this careteam
        for prov in provs:
            #when you do an all on the providers, they are actually user objects
            users.append(prov)
            
        #create fictitious cases and case activity by patients and providers.
        for num in range(0,MAX_INITIAL_CASES):            
            case = create_case(users[random.randint(0,len(users)-1)], users, num)
            team.cases.add(case)
            num_revisions = random.randint(0,MAX_REVISIONS)
            print "New case created for patient %s, case %d" % (team.patient, num)
            for rev in range(0,num_revisions):
                print "\tApplying revision %d - %d" % (rev, revision_no)
                modding_user = users[random.randint(0,len(users)-1)]
                modify_case(case, modding_user, revision_no)
                revision_no += 1
   
    
    
        
        
        

    
    
        
        
        
        
        